name: WhatsApp Clone Flutter Mobile CI/CD

on:
  push:
    branches: [ main, develop, epic/* ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, develop ]

env:
  # Flutter
  FLUTTER_VERSION: '3.24.0'
  
  # iOS
  IOS_APP_ID: '1234567890'  # Replace with actual App Store Connect App ID
  IOS_BUNDLE_ID: 'com.whatsappclone.app'
  
  # Android
  ANDROID_PACKAGE_NAME: 'com.whatsappclone.app'
  ANDROID_UPLOAD_KEY_ALIAS: 'upload'
  
  # Versioning
  VERSION_CODE_OFFSET: 1000000

jobs:
  # Test Job
  test:
    name: Run Flutter Tests
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ env.FLUTTER_VERSION }}
        channel: 'stable'
        cache: true
    
    - name: Get Flutter dependencies
      run: flutter pub get
    
    - name: Generate code
      run: flutter packages pub run build_runner build --delete-conflicting-outputs
    
    - name: Analyze code
      run: flutter analyze --fatal-infos
    
    - name: Check formatting
      run: dart format --output=none --set-exit-if-changed .
    
    - name: Run unit tests
      run: flutter test --coverage --reporter=expanded
    
    - name: Run integration tests (Android)
      uses: reactivecircus/android-emulator-runner@v2
      with:
        api-level: 33
        target: google_apis
        arch: x86_64
        script: flutter test integration_test/
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: coverage/lcov.info
        token: ${{ secrets.CODECOV_TOKEN }}
        fail_ci_if_error: false

  # Security Scanning
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ env.FLUTTER_VERSION }}
        channel: 'stable'
        cache: true
    
    - name: Get dependencies
      run: flutter pub get
    
    - name: Run Flutter security audit
      run: |
        dart pub deps --json > deps.json
        # Check for known vulnerable packages
        flutter pub deps --json | grep -E '"version"|"name"' || true
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

  # Build Android APK
  build-android:
    name: Build Android APK
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: [test, security]
    if: github.event_name != 'pull_request'
    
    outputs:
      version-name: ${{ steps.version.outputs.version-name }}
      version-code: ${{ steps.version.outputs.version-code }}
      apk-path: ${{ steps.build.outputs.apk-path }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ env.FLUTTER_VERSION }}
        channel: 'stable'
        cache: true
    
    - name: Setup Java
      uses: actions/setup-java@v3
      with:
        distribution: 'zulu'
        java-version: '17'
    
    - name: Calculate version
      id: version
      run: |
        VERSION_NAME=$(grep '^version: ' pubspec.yaml | cut -d ' ' -f 2 | cut -d '+' -f 1)
        VERSION_CODE=$((${VERSION_CODE_OFFSET} + ${GITHUB_RUN_NUMBER}))
        echo "version-name=${VERSION_NAME}" >> $GITHUB_OUTPUT
        echo "version-code=${VERSION_CODE}" >> $GITHUB_OUTPUT
        echo "Building version ${VERSION_NAME} (${VERSION_CODE})"
    
    - name: Get Flutter dependencies
      run: flutter pub get
    
    - name: Generate code
      run: flutter packages pub run build_runner build --delete-conflicting-outputs
    
    - name: Configure Android signing (Release)
      if: startsWith(github.ref, 'refs/tags/v')
      run: |
        echo "${{ secrets.ANDROID_KEYSTORE_BASE64 }}" | base64 -d > android/app/keystore.jks
        echo "storePassword=${{ secrets.ANDROID_KEYSTORE_PASSWORD }}" >> android/key.properties
        echo "keyPassword=${{ secrets.ANDROID_KEY_PASSWORD }}" >> android/key.properties
        echo "keyAlias=${{ env.ANDROID_UPLOAD_KEY_ALIAS }}" >> android/key.properties
        echo "storeFile=keystore.jks" >> android/key.properties
    
    - name: Build Android APK (Debug)
      if: "!startsWith(github.ref, 'refs/tags/v')"
      run: |
        flutter build apk --debug --build-name=${{ steps.version.outputs.version-name }} --build-number=${{ steps.version.outputs.version-code }}
        echo "apk-path=build/app/outputs/flutter-apk/app-debug.apk" >> $GITHUB_OUTPUT
      id: build
    
    - name: Build Android APK (Release)
      if: startsWith(github.ref, 'refs/tags/v')
      run: |
        flutter build apk --release --build-name=${{ steps.version.outputs.version-name }} --build-number=${{ steps.version.outputs.version-code }}
        echo "apk-path=build/app/outputs/flutter-apk/app-release.apk" >> $GITHUB_OUTPUT
      id: build-release
    
    - name: Upload APK artifact
      uses: actions/upload-artifact@v3
      with:
        name: android-apk-${{ steps.version.outputs.version-name }}
        path: ${{ steps.build.outputs.apk-path || steps.build-release.outputs.apk-path }}
        retention-days: 30

  # Build iOS IPA
  build-ios:
    name: Build iOS IPA
    runs-on: macos-14
    timeout-minutes: 45
    needs: [test, security]
    if: github.event_name != 'pull_request'
    
    outputs:
      version-name: ${{ steps.version.outputs.version-name }}
      version-code: ${{ steps.version.outputs.version-code }}
      ipa-path: ${{ steps.build.outputs.ipa-path }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ env.FLUTTER_VERSION }}
        channel: 'stable'
        cache: true
    
    - name: Calculate version
      id: version
      run: |
        VERSION_NAME=$(grep '^version: ' pubspec.yaml | cut -d ' ' -f 2 | cut -d '+' -f 1)
        VERSION_CODE=$((${VERSION_CODE_OFFSET} + ${GITHUB_RUN_NUMBER}))
        echo "version-name=${VERSION_NAME}" >> $GITHUB_OUTPUT
        echo "version-code=${VERSION_CODE}" >> $GITHUB_OUTPUT
        echo "Building version ${VERSION_NAME} (${VERSION_CODE})"
    
    - name: Get Flutter dependencies
      run: flutter pub get
    
    - name: Generate code
      run: flutter packages pub run build_runner build --delete-conflicting-outputs
    
    - name: Install iOS certificates
      if: startsWith(github.ref, 'refs/tags/v')
      env:
        BUILD_CERTIFICATE_BASE64: ${{ secrets.IOS_BUILD_CERTIFICATE_BASE64 }}
        P12_PASSWORD: ${{ secrets.IOS_P12_PASSWORD }}
        BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.IOS_BUILD_PROVISION_PROFILE_BASE64 }}
        KEYCHAIN_PASSWORD: ${{ secrets.IOS_KEYCHAIN_PASSWORD }}
      run: |
        # Create variables
        CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
        PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
        KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
        
        # Import certificate and provisioning profile from secrets
        echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH
        echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode -o $PP_PATH
        
        # Create temporary keychain
        security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
        security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
        security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
        
        # Import certificate to keychain
        security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
        security list-keychain -d user -s $KEYCHAIN_PATH
        
        # Apply provisioning profile
        mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
        cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles
    
    - name: Build iOS (Debug)
      if: "!startsWith(github.ref, 'refs/tags/v')"
      run: |
        flutter build ios --debug --no-codesign --build-name=${{ steps.version.outputs.version-name }} --build-number=${{ steps.version.outputs.version-code }}
        echo "ipa-path=build/ios/iphoneos/Runner.app" >> $GITHUB_OUTPUT
      id: build
    
    - name: Build iOS (Release)
      if: startsWith(github.ref, 'refs/tags/v')
      run: |
        flutter build ios --release --build-name=${{ steps.version.outputs.version-name }} --build-number=${{ steps.version.outputs.version-code }}
        
        # Create IPA
        mkdir -p build/ios/ipa
        xcodebuild -workspace ios/Runner.xcworkspace \
                   -scheme Runner \
                   -configuration Release \
                   -destination 'generic/platform=iOS' \
                   -archivePath build/ios/Runner.xcarchive \
                   archive
        
        xcodebuild -exportArchive \
                   -archivePath build/ios/Runner.xcarchive \
                   -exportPath build/ios/ipa \
                   -exportOptionsPlist ios/ExportOptions.plist
        
        echo "ipa-path=build/ios/ipa/Runner.ipa" >> $GITHUB_OUTPUT
      id: build-release
    
    - name: Upload IPA artifact
      uses: actions/upload-artifact@v3
      with:
        name: ios-ipa-${{ steps.version.outputs.version-name }}
        path: ${{ steps.build.outputs.ipa-path || steps.build-release.outputs.ipa-path }}
        retention-days: 30
    
    - name: Clean up keychain
      if: always() && startsWith(github.ref, 'refs/tags/v')
      run: |
        security delete-keychain $RUNNER_TEMP/app-signing.keychain-db || true

  # Deploy to App Store Connect (iOS)
  deploy-ios:
    name: Deploy to App Store Connect
    runs-on: macos-14
    timeout-minutes: 30
    needs: build-ios
    if: startsWith(github.ref, 'refs/tags/v')
    environment: ios-production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Download IPA artifact
      uses: actions/download-artifact@v3
      with:
        name: ios-ipa-${{ needs.build-ios.outputs.version-name }}
    
    - name: Upload to App Store Connect
      env:
        APP_STORE_CONNECT_USERNAME: ${{ secrets.APP_STORE_CONNECT_USERNAME }}
        APP_STORE_CONNECT_PASSWORD: ${{ secrets.APP_STORE_CONNECT_PASSWORD }}
      run: |
        xcrun altool --upload-app \
          --type ios \
          --file Runner.ipa \
          --username "$APP_STORE_CONNECT_USERNAME" \
          --password "$APP_STORE_CONNECT_PASSWORD" \
          --verbose
    
    - name: Create GitHub Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: iOS Release ${{ needs.build-ios.outputs.version-name }}
        body: |
          iOS Release ${{ needs.build-ios.outputs.version-name }}
          
          Changes:
          - Automated release from CI/CD pipeline
          
          Build Information:
          - Version: ${{ needs.build-ios.outputs.version-name }}
          - Build Number: ${{ needs.build-ios.outputs.version-code }}
          - Commit: ${{ github.sha }}
        draft: false
        prerelease: false

  # Deploy to Google Play Console (Android)
  deploy-android:
    name: Deploy to Google Play Console
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: build-android
    if: startsWith(github.ref, 'refs/tags/v')
    environment: android-production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Download APK artifact
      uses: actions/download-artifact@v3
      with:
        name: android-apk-${{ needs.build-android.outputs.version-name }}
    
    - name: Setup Google Play credentials
      run: |
        echo "${{ secrets.GOOGLE_PLAY_SERVICE_ACCOUNT_JSON }}" > google-play-service-account.json
    
    - name: Upload to Google Play Console
      uses: r0adkll/upload-google-play@v1
      with:
        serviceAccountJson: google-play-service-account.json
        packageName: ${{ env.ANDROID_PACKAGE_NAME }}
        releaseFiles: app-release.apk
        track: internal # Change to 'production' for production releases
        status: completed
        inAppUpdatePriority: 2
    
    - name: Create GitHub Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Android Release ${{ needs.build-android.outputs.version-name }}
        body: |
          Android Release ${{ needs.build-android.outputs.version-name }}
          
          Changes:
          - Automated release from CI/CD pipeline
          
          Build Information:
          - Version: ${{ needs.build-android.outputs.version-name }}
          - Build Number: ${{ needs.build-android.outputs.version-code }}
          - Commit: ${{ github.sha }}
        draft: false
        prerelease: false
    
    - name: Cleanup
      if: always()
      run: |
        rm -f google-play-service-account.json || true

  # Mobile App Performance Tests
  performance-test:
    name: Mobile Performance Tests
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: [build-android, build-ios]
    if: github.ref == 'refs/heads/develop'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ env.FLUTTER_VERSION }}
        channel: 'stable'
        cache: true
    
    - name: Get dependencies
      run: flutter pub get
    
    - name: Run Flutter performance tests
      uses: reactivecircus/android-emulator-runner@v2
      with:
        api-level: 33
        target: google_apis
        arch: x86_64
        script: |
          flutter test --reporter=expanded test/performance/
          flutter drive --target=test_driver/app.dart --driver=test_driver/performance_test.dart

  # Cleanup
  cleanup:
    name: Cleanup Build Artifacts
    runs-on: ubuntu-latest
    if: always()
    needs: [test, security, build-android, build-ios, deploy-android, deploy-ios, performance-test]
    
    steps:
    - name: Cleanup build artifacts
      run: |
        echo "Cleaning up temporary build artifacts..."
        # Artifacts are automatically cleaned up by GitHub Actions
        # based on retention policy (30 days for APKs/IPAs)