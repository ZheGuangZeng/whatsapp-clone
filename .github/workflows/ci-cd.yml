name: WhatsApp Clone CI/CD Pipeline

on:
  push:
    branches: [ main, develop, epic/* ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, develop ]

env:
  # Docker registry
  DOCKER_REGISTRY: docker.io
  DOCKER_REPOSITORY: whatsappclone/web
  
  # Kubernetes
  KUSTOMIZE_VERSION: 5.0.3
  KUBECTL_VERSION: 1.28.0
  
  # AWS
  AWS_REGION: ap-southeast-1
  EKS_CLUSTER_NAME: whatsapp-clone-production

jobs:
  # Test Job
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.24.0'
        channel: 'stable'
        cache: true
    
    - name: Get Flutter dependencies
      run: flutter pub get
    
    - name: Analyze code
      run: flutter analyze --fatal-infos
    
    - name: Check formatting
      run: dart format --output=none --set-exit-if-changed .
    
    - name: Run unit tests
      run: flutter test --coverage --reporter=expanded
    
    - name: Run integration tests (headless)
      run: |
        sudo apt-get update
        sudo apt-get install -y chromium-browser
        export CHROME_EXECUTABLE=/usr/bin/chromium-browser
        flutter test integration_test/ --device-id=chrome --headless
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: coverage/lcov.info
        token: ${{ secrets.CODECOV_TOKEN }}
        fail_ci_if_error: false

  # Security Scanning
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

  # Build and Push Docker Image
  build:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: [test, security]
    if: github.event_name != 'pull_request'
    
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        registry: ${{ env.DOCKER_REGISTRY }}
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_REPOSITORY }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          BUILD_DATE=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
          VCS_REF=${{ github.sha }}
          VERSION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.version'] }}

  # Deploy to Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: build
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_STAGING }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_STAGING }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Setup kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: ${{ env.KUBECTL_VERSION }}
    
    - name: Setup kustomize
      run: |
        curl -s "https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh" | bash
        sudo mv kustomize /usr/local/bin/
    
    - name: Update kubeconfig
      run: |
        aws eks update-kubeconfig \
          --region ${{ env.AWS_REGION }} \
          --name whatsapp-clone-staging
    
    - name: Deploy to staging
      run: |
        cd infrastructure/kubernetes/overlays/staging
        kustomize edit set image whatsapp-clone=${{ needs.build.outputs.image-tag }}
        kustomize build . | kubectl apply -f -
    
    - name: Verify deployment
      run: |
        kubectl rollout status deployment/whatsapp-clone-web -n whatsapp-clone-staging
        kubectl get services -n whatsapp-clone-staging

  # Deploy to Production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: [build, deploy-staging]
    if: startsWith(github.ref, 'refs/tags/v')
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Configure AWS credentials (Singapore)
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_PROD }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_PROD }}
        aws-region: ap-southeast-1
    
    - name: Setup kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: ${{ env.KUBECTL_VERSION }}
    
    - name: Setup kustomize
      run: |
        curl -s "https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh" | bash
        sudo mv kustomize /usr/local/bin/
    
    - name: Update kubeconfig (Singapore)
      run: |
        aws eks update-kubeconfig \
          --region ap-southeast-1 \
          --name whatsapp-clone-production-sg
    
    - name: Deploy to Singapore
      run: |
        cd infrastructure/kubernetes/overlays/production
        kustomize edit set image whatsapp-clone=${{ needs.build.outputs.image-tag }}
        kustomize build . | kubectl apply -f -
    
    - name: Verify Singapore deployment
      run: |
        kubectl rollout status deployment/whatsapp-clone-web -n whatsapp-clone-prod
        kubectl get services -n whatsapp-clone-prod
    
    # Deploy to Japan region
    - name: Configure AWS credentials (Japan)
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_PROD_JP }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_PROD_JP }}
        aws-region: ap-northeast-1
    
    - name: Update kubeconfig (Japan)
      run: |
        aws eks update-kubeconfig \
          --region ap-northeast-1 \
          --name whatsapp-clone-production-jp
    
    - name: Deploy to Japan
      run: |
        cd infrastructure/kubernetes/overlays/production
        # Use Japan-specific configuration
        kustomize edit set image whatsapp-clone=${{ needs.build.outputs.image-tag }}
        kustomize build . | kubectl apply -f -
    
    - name: Verify Japan deployment
      run: |
        kubectl rollout status deployment/whatsapp-clone-web -n whatsapp-clone-prod
        kubectl get services -n whatsapp-clone-prod

  # Infrastructure Deployment
  deploy-infrastructure:
    name: Deploy Infrastructure
    runs-on: ubuntu-latest
    timeout-minutes: 45
    if: github.ref == 'refs/heads/main' && contains(github.event.head_commit.message, '[infra]')
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_PROD }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_PROD }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.5.0
    
    - name: Terraform Init
      run: |
        cd infrastructure/terraform
        terraform init
    
    - name: Terraform Plan
      run: |
        cd infrastructure/terraform
        terraform plan \
          -var="environment=production" \
          -var="region=${{ env.AWS_REGION }}" \
          -out=tfplan
    
    - name: Terraform Apply
      run: |
        cd infrastructure/terraform
        terraform apply tfplan

  # Performance Tests
  performance-test:
    name: Performance Tests
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: deploy-staging
    if: github.ref == 'refs/heads/develop'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: infrastructure/testing/package-lock.json
    
    - name: Install dependencies
      run: |
        cd infrastructure/testing
        npm install
    
    - name: Run load tests
      run: |
        cd infrastructure/testing
        npx k6 run \
          --env TARGET_URL=https://staging.whatsappclone.com \
          --env DURATION=5m \
          --env VUS=100 \
          load-test.js

  # Cleanup
  cleanup:
    name: Cleanup
    runs-on: ubuntu-latest
    if: always()
    needs: [test, security, build, deploy-staging, deploy-production, deploy-infrastructure, performance-test]
    
    steps:
    - name: Cleanup Docker images
      run: |
        docker system prune -a -f || true
    
    - name: Cleanup runner
      run: |
        sudo rm -rf $GITHUB_WORKSPACE || true